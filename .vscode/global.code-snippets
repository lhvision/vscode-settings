{
  "import": {
    "scope": "javascript,typescript",
    "prefix": "im",
    "body": [
      "import { $1 } from '$2';"
    ],
    "description": "Import a module"
  },
  "export-all": {
    "scope": "javascript,typescript",
    "prefix": "ex",
    "body": [
      "export * from '$2';"
    ],
    "description": "Export a module"
  },
  "vue-script-setup": {
    "scope": "vue",
    "prefix": "<sc",
    "body": [
      "<script setup lang=\"ts\">",
      "const props = defineProps<{",
      "  modelValue?: boolean,",
      "}>()",
      "$1",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    <slot/>",
      "  </div>",
      "</template>",
    ]
  },
  "vue-template-ref": {
    "scope": "javascript,typescript,vue",
    "prefix": "tref",
    "body": [
      "const ${1:el} = shallowRef<HTMLDivElement>()",
    ]
  },
  "vue-computed": {
    "scope": "javascript,typescript,vue",
    "prefix": "com",
    "body": [
      "computed(() => { $1 })"
    ]
  },
  "vue-watch-effect": {
    "scope": "javascript,typescript,vue",
    "prefix": "watchE",
    "body": [
      "watchEffect(() => {",
      "  $1",
      "})"
    ]
  },
  "if-vitest": {
    "scope": "javascript,typescript",
    "prefix": "ifv",
    "body": [
      "if (import.meta.vitest) {",
      "  const { describe, it, expect } = import.meta.vitest",
      "  ${1}",
      "}"
    ]
  },
  "markdown-api-table": {
    "scope": "markdown",
    "prefix": "table",
    "body": [
      "<table>",
      "<tr>",
      "<td width=\"400px\" valign=\"top\">",
      "",
      "### API",
      "",
      "Description",
      "",
      "</td>",
      "<td width=\"600px\"><br>",
      "",
      "```ts",
      "// code block",
      "```",
      "",
      "</td>",
      "</tr>",
      "</table>",
    ],
  },
  "color-log": {
    "scope": "javascript,typescript",
    "prefix": "clog",
    "body": [
      "const colorANSIMap = {",
      "  reset: '\\x1B[0m',",
      "  bright: '\\x1B[1m',",
      "  dim: '\\x1B[2m',",
      "  underscore: '\\x1B[4m',",
      "  blink: '\\x1B[5m',",
      "  reverse: '\\x1B[7m',",
      "  hidden: '\\x1B[8m',",
      "  fgBlack: '\\x1B[30m',",
      "  fgRed: '\\x1B[31m',",
      "  fgGreen: '\\x1B[32m',",
      "  fgYellow: '\\x1B[33m',",
      "  fgBlue: '\\x1B[34m',",
      "  fgMagenta: '\\x1B[35m',",
      "  fgCyan: '\\x1B[36m',",
      "  fgWhite: '\\x1B[37m',",
      "  bgBlack: '\\x1B[40m',",
      "  bgRed: '\\x1B[41m',",
      "  bgGreen: '\\x1B[42m',",
      "  bgYellow: '\\x1B[43m',",
      "  bgBlue: '\\x1B[44m',",
      "  bgMagenta: '\\x1B[45m',",
      "  bgCyan: '\\x1B[46m',",
      "  bgWhite: '\\x1B[47m'",
      "};",
      "",
      "function colorLog(message, type = 'info') {",
      "  let color;",
      "",
      "  switch (type) {",
      "    case 'success':",
      "      color = colorANSIMap.fgGreen;",
      "      break;",
      "    case 'info':",
      "      color = colorANSIMap.fgBlue;",
      "      break;",
      "    case 'error':",
      "      color = colorANSIMap.fgRed;",
      "      break;",
      "    case 'warning':",
      "      color = colorANSIMap.fgYellow;",
      "      break;",
      "    default:",
      "      color = colorANSIMap[type];",
      "      break;",
      "  }",
      "",
      "  console.log(color, message, colorANSIMap.reset);",
      "}",
    ],
    "description": "Inserts a function for printing colored logs"
  }
}
